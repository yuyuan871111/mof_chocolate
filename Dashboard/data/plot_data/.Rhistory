## prepare species data
##################################
species_data <- t(read.csv("TABLE3.csv", header = F))
species_data[ ,1] <- species_data[ ,1] %>% sub("\\d*\\.\\s", "",.) %>%
sub("Characteristic", "SpeciesName",.)
species_data[-1,] <- species_data[-1,] %>% sub("\\(", "",.) %>% sub(".\\)", "",.) %>% sub("\\_.$", "",.)
species_names <- species_data[-1,1]
names(species_names) <- NULL
colnames(species_data) <- species_data[1, ]
species_data <- as_tibble(species_data[-1, ])
View(species_data)
runApp()
runApp()
species_tidy_data <- function(species){
data_temp <- species %>% map(., filter_species ) %>%
Reduce(function(...){bind_rows(...)},.) %>%
select_if(., function(col) sum(!is.na(col)) == length(species)) %>%
select_if(., function(colu) grepl("\\w", colu))
}
filter_species <- function(each_species){
each_table <- species_data %>% filter(., SpeciesName == each_species)
}
species_tidy_data(species_names[1:10])
species_tidy_data <- function(species){
data_temp <- species %>% map(., filter_species ) %>%
Reduce(function(...){bind_rows(...)},.) %>%
select_if(., function(col) sum(!is.na(col)) == length(species)) %>%
select_if(., function(colu) sum(grepl("\\w", colu)) == 0 )
}
species_tidy_data(species_names[1:10])
species_tidy_data(species_names[1:10]) ->tt
View(tt)
species_tidy_data <- function(species){
data_temp <- species %>% map(., filter_species ) %>%
Reduce(function(...){bind_rows(...)},.) %>%
select_if(., function(col) sum(!is.na(col)) == length(species)) %>%
column_to_rownames(., var = "SpeciesName") %>%
select_if(., function(colu) sum(grepl("\\w", colu)) == 0 ) %>%
rownames_to_column(., var = "SpeciesName")
}
species_tidy_data(species_names[1:10]) ->tt
species_tidy_data <- function(species){
data_temp <- species %>% map(., filter_species ) %>%
Reduce(function(...){bind_rows(...)},.) %>%
select_if(., function(col) sum(!is.na(col)) == length(species)) %>%
select_if(., function(colu) sum(grepl("\\w", colu)) == 0 || length((species)))
}
species_tidy_data(species_names[1:10]) ->tt
View(tt)
shiny::runApp()
runApp()
grepl("\\w", "v")
grepl("\\w", "w")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
read_csv("~/Desktop/Species_selected.csv") -> table1
View(table1)
rownames(table1)
str(table1)
column_to_rownames(table1, var = "SpeciesGenus")
column_to_rownames(table1, var = "SpeciesName")
read.csv("~/Desktop/Species_selected.csv") -> table1
View(table1)
str(table1)
View(table1)
read_csv("~/Desktop/Species_selected.csv") -> table1
View(table1)
as.data.frame(table1) -> table1
View(table1)
class(table1)
read_csv("~/Desktop/Species_selected.csv") -> table1
class(table1)
as.data.frame(table1) -> table1
column_to_rownames(table1, var = "SpeciesName")
View(table1)
View(table1)
column_to_rownames(table1, var = "SpeciesName") -> table1
View(table1)
table1 <- read_csv("~/Desktop/Species_selected.csv") %>%
as.data.frame() %>%
column_to_rownames(, var = "SpeciesName")
View(table1)
[1:10]
[1:10]
c(1:10) -> test
class(test)
str(test)
c(1:10, "ee") -> test
class(test)
str(test)
as.factor(test)
c(1:10, "ee", 1:10) -> test
as.factor(test)
levels(test)
levels(as.factor(test))
read_csv("~/Desktop/Species_selected.csv") -> table1
View(table1)
source('~/.active-rstudio-document', echo=TRUE)
View(table1)
gather(table1, 'Pigmented colonies (Yellow-pink-red)', key = "features", value = "values")
View(table1)
tt <- gather(table1, 'Pigmented colonies (Yellow-pink-red)', key = "features", value = "values")
View(tt)
tt <- gather(table1, select_all(), key = "features", value = "values")
tt <- gather(table1, select_all(table1), key = "features", value = "values")
colnames(table1)
merge_names <- colnames(table)[-1]
merge_names <- colnames(table1)[-1]
tt <- gather(table1, merge_names, key = "features", value = "values")
View(tt)
library(igraph)
install.packages("igraph")
install.packages("igraph", repos = "http://cran.case.edu")
install.packages("igraph")
library(igraph)
library(reticulate)
use_python("/usr/bin/python2.7")
setwd("~/Downloads/CowBDrawaclassificationtree (1)/")
library(reticulate)
use_python("/usr/bin/python2.7")
source_python("main.py")
py("main.py")
import("main.py")
source_python("__init__.py", "tree.py", "stack.py", "queue.py", "main.py")
source_python("__init__.py", "tree.py", "stack.py")
source_python("__init__.py")
source_python("tree.py")
View(dat_dict)
source_python("stack.py")
source_python("tree.py")
source_python("queue.py")
source_python("tree.py")
source_python("main.py")
source_python("tree.py")
import(module = Queue())
use_python("/usr/bin/python2.7")
repl_python("__init__.py")
repl_python("main.py")
repl_python()
shiny::runApp('~/Desktop/summer_intern/gitdata_code/project6_shiny/Shiny_test')
runApp('~/Desktop/summer_intern/gitdata_code/project6_shiny/Shiny_test')
repl_python()
setwd("~/Downloads/CowBDrawaclassificationtree (1)/")
library(reticulate)
use_python("/usr/bin/python2.7")
repl_python()
import("main.py")
install.packages("igraph")
table1 <- read_csv("~/Desktop/Species_selected.csv")
merge_names <- colnames(table1)[-1]
tt <- gather(table1, merge_names, key = "features", value = "values")
View(tt)
??env
Sys.getenv()
Sys.getenv("PATH")
PATH <- Sys.getenv("PATH")
PATH2 <- c("/Users/yuyuan/anaconda3/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/opt/X11/bin")
strsplit(PATH, ":") -> PATH_spl
strsplit(PATH2, ":") -> PATH2_spl
View(PATH_spl)
View(PATH2_spl)
Sys.setenv(PATH = "/Users/yuyuan/anaconda3/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/opt/X11/bin")
Sys.getenv("PATH")
install.packages("igraph")
View(PATH_spl)
View(PATH2_spl)
View(PATH_spl)
sort(PATH_spl)
sort(PATH_spl[[1]])
sort(PATH2_spl[[1]])
sort(PATH_spl[[1]]) == sort(PATH2_spl)
sort(PATH_spl[[1]]) == sort(PATH2_spl[[1]])
library(data.tree)
install.packages("data.tree")
install.packages("data.tree")
library(data.tree)
install.packages("data.tree")
shiny::runApp()
library(treemap)
install.packages("treemap")
library(treemap)
library(reticulate)
install.packages("reticulate")
library(reticulate)
GNI2014$continent <- as.character(GNI2014$continent)
data(GNI2014)
data(GNI2014)
View(GNI2014)
treemap(GNI2014,
index=c("continent", "iso3"),
vSize="population",
vColor="GNI",
type="value")
table1 <- read_csv("~/Desktop/Species_selected.csv")
merge_names <- colnames(table1)[-1]
tt <- gather(table1, merge_names, key = "features", value = "values")
treemap(tt, index = "SpeciesName", vColor = "values")
treemap(tt, index = "SpeciesName",vSize = "values", vColor = "features")
GNI2014$continent <- as.character(GNI2014$continent)
GNI2014$pathString <- paste("world", GNI2014$continent, GNI2014$country, sep = "/")
View(GNI2014)
View(table1)
tree <- as.Node(GNI2014[,])
library(reticulate)
library(data.tree)
library(treemap)
tree <- as.Node(GNI2014[,])
tre
tree
GNI2014[,]
print(tree, pruneMethod = "dist", limit = 20)
tree$Do(function(x) x$origCount <- x$count)
myPruneFun <- function(x, cutoff = 0.9, maxCountries = 7) {
if (isNotLeaf(x)) return (TRUE)
if (x$position > maxCountries) return (FALSE)
return (x$cumPop < (x$parent$population * cutoff))
}
treeClone <- Clone(tree, pruneFun = myPruneFun)
print(tree, pruneMethod = "dist", limit = 20)
table1 <- read_csv("~/Desktop/Species_selected.csv")
merge_names <- colnames(table1)[-1]
tt <- gather(table1, merge_names, key = "features", value = "values")
View(table1)
tt2 <- table1[ ,1]
View(tt2)
View(tt)
select(tt, "features" == merge_names[1])
select(tt, "features" == merge_names[1])
select(tt, matches(merge_names[1]))
filter(tt, matches(merge_names[1]))
merge_names[1]
View(tt)
filter(tt, features == merge_names[1])
tt2$pathString <- paste(merge_names[1], tt$values, sep = "/")
tt2$pathString <- paste(merge_names[1], sep = "/",
filter(tt, features == merge_names[1])$values)
View(tt2)
tree <- as.Node(tt2[,])
tree <- as.Node(tt2[,], pruneMethod = "dist", limit = 20)
data(acme)
#Tree
x <- ToDataFrameTree(acme, "pathString", "p", "cost")
View(x)
x
xN <- as.Node(x)
print(xN, "p", "cost")
print(xN)
View(x)
xN <- as.Node(x[,2])
xN <- as.Node(x[,2:3])
print(xN)
View(x)
xN <- as.Node(c(x[,2], x[,4]))
xN <- as.Node(x[,1:2])
print(xN)
View(x)
###### example
##############
data(GNI2014)
treemap(GNI2014,
index=c("continent", "iso3"),
vSize="population",
vColor="GNI",
type="value")
GNI2014$continent <- as.character(GNI2014$continent)
View(GNI2014)
GNI2014$pathString <- paste("world", GNI2014$continent, GNI2014$country, sep = "/")
View(GNI2014)
str(GNI2014$pathString)
str(GNI2014$continent)
str(GNI2014$contry)
str(GNI2014$country)
tree <- as.Node(GNI2014[,-4:-3])
print(tree, pruneMethod = "dist", limit = 20)
View(GNI2014)
tree <- as.Node(GNI2014[,-5:-3])
print(tree, pruneMethod = "dist", limit = 20)
View(GNI2014)
GNI2014[,-5:-3]
View(tt2)
View(GNI2014)
tt2$pathString <- paste(merge_names[1], sep = "/",
filter(tt, features == merge_names[1])$values)
View(tt2)
tt2$pathString <- paste(merge_names[1], sep = "/",
filter(tt, features == merge_names[1])$values,
tt2[,1])
View(tt2)
tt2$pathString <- paste(merge_names[1], sep = "/",
filter(tt, features == merge_names[1])$values,
tt2$SpeciesName)
View(tt2)
tree <- as.Node(tt2)
print(tree)
##################################
### filter the selected species data and clean data
# filter function
filter_species <- function(each_species){
each_table <- species_data %>% filter(., SpeciesName == each_species)
}
filter(tt, filter(tt, features == merge_names[1])$values == "+")
filter(filter(tt, features == merge_names[1]), values == "+")
filter(tt, features == merge_names[1]) %>% filter(., values == "+")
View(table1)
View(table1)
View(GNI2014)
View(table1)
View(table1)
table1[[merge_names[1]]]
tt3 <- table1 %>% mutate(., merge_names[1] == paste(merge_names[1], "(+)"))
View(tt3)
tt <- gather(table1, merge_names, key = "features", value = "values") %>%
unite(., features, values, col = "Features", sep = ":")
View(tt)
View(tt)
View(tt2)
tt2 <- table1[ ,1]
filter_if(tt, function(col) grep(merge_names[1], col) )
grep(merge_names[1], tt[,2])
merge_names[1]
tt[,2]
grep("/[merge_names[1]]/", tt[,2], perl = T)
grep(/[merge_names[1]/, tt[,2], perl = T)
grep(/[merge_names[1]]/, tt[,2], perl = T)
grep("/[merge_names[1]]/", tt[,2], perl = T)
[merge_names[1]]
merge_names[1]
grep("~/[merge_names[1]]/", tt[,2], perl = T)
grep("~/[merge_names[1]]/i", tt[,2], perl = T)
grep("~/[$merge_names[1]]/i", tt[,2], perl = T)
View(tt)
grep( paste("^", merge_names, sep="", collapse="|") , tt)
View(tt)
grep( paste("^", merge_names, sep="", collapse="|") , tt[,2])
paste("^", merge_names, sep="", collapse="|")
grep( paste("^", merge_names, sep="", collapse=".*|") , tt[,2])
tt[,2]
grep( paste("^", merge_names[1],".*", sep="") , tt[,2])
grep( paste("^", merge_names[1],".*", sep="") , tt[,2][1])
tt[,2][1]
grep( paste("^", merge_names[1],".*", sep="") , tt[1,2])
grep( paste("^", merge_names[1],".*", sep="") , tt[1,2])
tt[1,2]
paste("^", merge_names[1],".*", sep="")
searh.pattern <- merge_names %>% sub("(", "\(", .) %>% sub(")", "\)", .)
searh.pattern <- merge_names %>% sub("(", "\\(", .) %>% sub(")", "\)", .)
searh.pattern <- merge_names %>% sub("(", "\\(", .) %>% sub(")", "\\)", .)
View(table1)
to_dict(table1)
source_python("Class_Tree_andTodict.py")
to_dict(table1)
source_python("Class_Tree_andTodict.py")
library(reticulate)
library(data.tree)
library(treemap)
source_python("Class_Tree_andTodict.py")
source_python("Class_Tree_andTodict.py")
to_dict(table1)
####################################################################
table1
####################################################################
as.data.frame(table1)
to_dict(table1)
####################################################################
table11 <- table1 %>% as.data.frame(.) %>% column_to_rownames(., var = "SpeciesName")
source_python("Class_Tree_andTodict.py")
to_dict(table1)
to_dict(table11)
View(table11)
to_dict(table11)
source_python("Class_Tree_andTodict.py")
use_python("/Users/yuyuan/anaconda3/bin/python")
source_python("Class_Tree_andTodict.py")
use_python("/Users/yuyuan/anaconda3/bin/python3.5")
source_python("Class_Tree_andTodict.py")
use_python("/Users/yuyuan/anaconda3/bin/")
source_python("Class_Tree_andTodict.py")
source_python("Class_Tree_andTodict.py")
to_dict(table11)
View(table11)
####################################################################
table11 <- table1 %>% as.data.frame(.) %>% column_to_rownames(., var = "SpeciesName") %>% .[,-2:10]
table11 <- table11[, 2:13]
table11 <- table11[, 2:10]
View(table11)
View(table1)
View(table11)
View(table1)
####################################################################
table11 <- table1 %>% as.data.frame(.) %>% column_to_rownames(., var = "SpeciesName")
table11 <- table11[ ,-2:10]
table11 <- table11[ ,-2:-10]
####################################################################
table11 <- table1 %>% as.data.frame(.) %>% column_to_rownames(., var = "SpeciesName")
table11 <- table11[ ,-2:-10]
####################################################################
table11 <- table1 %>% as.data.frame(.) %>% column_to_rownames(., var = "SpeciesName")
table11 <- table11[ ,-10:-2]
####################################################################
table11 <- table1 %>% as.data.frame(.) %>% column_to_rownames(., var = "SpeciesName")
table11 <- table11[ ,-8]
View(table11)
View(table1)
View(table11)
table11 <- table11[ ,1]
####################################################################
table11 <- table1 %>% as.data.frame(.) %>% column_to_rownames(., var = "SpeciesName")
table11 <- table11[ ,1]
table11 <- table11[ ,1:2]
####################################################################
table11 <- table1 %>% as.data.frame(.) %>% column_to_rownames(., var = "SpeciesName")
table11 <- table11[ ,1:2]
View(table11)
table11 <- table11[ ,1]
View(tt)
####################################################################
table11 <- table1 %>% as.data.frame(.)
table11 <- table11[ ,1]
table11 <- column_to_rownames(table11, var = "SpeciesName")
####################################################################
table11 <- table1 %>% as.data.frame(.)
table11 <- table11[ ,1:2]
View(table11)
table11 <- column_to_rownames(table11, var = "SpeciesName")
View(table11)
source_python("Class_Tree_andTodict.py")
to_dict(table11)
source('~/Desktop/summer_intern/gitdata_code/project6_shiny/Shiny_test/tree_plot_from_py_n1.R', echo=TRUE)
View(table11)
str(table11)
reticulate::py_config()
use_condaenv("/Users/yuyuan/anaconda3/")
reticulate::py_config()
use_python("/Users/yuyuan/anaconda3/bin/python")
reticulate::py_config()
import("sys") -> sys
sys$version
use_python("/Users/yuyuan/anaconda3/bin/python3")
sys$version
use_python("/Users/yuyuan/anaconda3/bin/python3-config")
sys$version
library(reticulate)
library(data.tree)
library(treemap)
####################################################################
table11 <- table1 %>% as.data.frame(.)
table11 <- table11[ ,1:2]
table11 <- column_to_rownames(table11, var = "SpeciesName")
import("sys") -> sys
library(dplyr)
####################################################################
table11 <- table1 %>% as.data.frame(.)
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="/usr/local/lib/R/3.5/site-library")
table1 <- read_csv("~/Desktop/Species_selected.csv")
library("tidyr", lib.loc="/usr/local/lib/R/3.5/site-library")
table1 <- read_csv("~/Desktop/Species_selected.csv")
## slider-type data input and plot functions setting
source("plot.R")
table1 <- read_csv("~/Desktop/Species_selected.csv")
table1 <- read_csv("~/Desktop/Species_selected.csv")
library(reticulate)
library(data.tree)
library(treemap)
library(dplyr)
####################################################################
table11 <- table1 %>% as.data.frame(.)
table11 <- table11[ ,1:2]
table11 <- column_to_rownames(table11, var = "SpeciesName")
import("sys") -> sys
sys$version
repl_python()
